{"version":3,"sources":["components/Movies.js","components/SearchForm.js","components/TvShows.js","components/Person.js","components/Navbar.js","components/Error.js","App.js","index.js","components/Card.js"],"names":["Card","require","default","Movies","props","className","style","color","searchTerm","searchResults","map","i","poster_path","title","image","date","release_date","rating","vote_average","genres","genre_ids","g","genresMovie","id","toString","SearchForm","onSubmit","event","preventDefault","onSubmitForm","target","value","elements","field","type","name","placeholder","defaultChecked","htmlFor","TvShows","first_air_date","genresTv","Person","profile_path","movies","known_for","Navbar","useState","category","setCategory","href","onClick","onNavClick","Error","msg","axios","App","resultArray","genre_ids_movie","genre_ids_tv","searchField","error","searchResult","setSearchResult","SubmitFormHandler","a","get","result","genre_ids_Tv","data","results","charAt","toUpperCase","slice","console","log","length","ReactDOM","render","document","getElementById","imageSource","src","m"],"mappings":"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","file":"static/js/main.b59669fa.chunk.js","sourcesContent":["const Card = require(\"./Card\").default;\n\nconst Movies = (props) => {\n  return (\n    <div className=\"col-md-10 offset-md-1 \">\n      <h2 style={{color: \"blanchedalmond\"}} className=\"mb-5\">Showing results for {props.searchTerm}...</h2>\n      <div className=\"d-flex flex-wrap justify-content-around\">\n        {props.searchResults.map((i) => {\n          if (i.poster_path)\n            return (\n              <Card\n                key={i.id.toString()}\n                title={i.title}\n                image={i.poster_path}\n                date={i.release_date}\n                rating={i.vote_average}\n                genres={i.genre_ids.map((g) => props.genresMovie[`${g}`])}\n              />\n            );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Movies;\n","require(\"./SearchForm.scss\");\n\nconst SearchForm = (props) => {\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onSubmitForm(\n      event.target[0].value,\n      event.target.elements.field.value\n    );\n    event.target[0].value = \"\";\n  };\n  return (\n    <div className=\"container\">\n      <div className=\"col-md-6 offset-md-3\">\n        <form onSubmit={submitHandler}>\n          <div className=\"search\">\n            <input\n              type=\"text\"\n              className=\"searchTerm\"\n              name=\"movies\"\n              placeholder=\"Search...\"\n            />\n            <button type=\"submit\" className=\"searchButton\">\n              <i className=\"fa fa-search\"></i>\n            </button>\n          </div>\n\n          <div className=\"filter mt-4\">\n            <label>\n              <input\n                type=\"radio\"\n                name=\"field\"\n                value=\"movie\"\n                defaultChecked\n              />\n              <span htmlFor=\"movie\">Movie</span>\n            </label>\n            <label>\n              <input type=\"radio\" name=\"field\" value=\"tv\" />\n              <span htmlFor=\"tvShow\">Tv Show</span>\n            </label>\n            <label>\n              <input type=\"radio\" name=\"field\" value=\"person\" />\n              <span htmlFor=\"actor\">Person</span>\n            </label>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchForm;\n","const Card = require(\"./Card\").default;\n\nconst TvShows = (props) => {\n  return (\n    <div className=\"col-md-10 offset-md-1\">\n      <h2 style={{ color: \"blanchedalmond\" }} className=\"mb-5\">\n        Showing results for {props.searchTerm}...\n      </h2>\n      <div className=\"d-flex flex-wrap justify-content-around\">\n        {props.searchResults.map((i) => {\n          if (i.poster_path)\n            return (\n              <Card\n                key={i.id.toString()}\n                title={i.name}\n                image={i.poster_path}\n                date={i.first_air_date}\n                rating={i.vote_average}\n                genres={i.genre_ids.map((g) => props.genresTv[`${g}`])}\n              />\n            );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default TvShows;\n","const Movies = require(\"./Movies\").default;\nconst Card = require(\"./Card\").default;\n\nconst Person = (props) => {\n  return (\n    <div className=\"col-md-10 offset-md-1\">\n      <h2 style={{ color: \"blanchedalmond\" }} className=\"mb-5\">\n        Showing results for {props.searchTerm}...\n      </h2>\n      <div className=\"d-flex flex-wrap justify-content-around\">\n        {props.searchResults.map((i) => {\n          if (i.profile_path)\n            return (\n              <Card\n                key={i.id.toString()}\n                title={i.name}\n                image={i.profile_path}\n                movies={i.known_for}\n              />\n            );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Person;\n","import { useState } from \"react\";\nrequire(\"./Navbar.css\");\n\nconst Navbar = (props) => {\n  const [category, setCategory] = useState(\"\");\n  const clickHandlerPopular = () => {\n    props.onNavClick(\"\", \"movie\", \"popular\");\n    setCategory(\"Popular\");\n  };\n  const clickHandlerTopRated = () => {\n    props.onNavClick(\"\", \"movie\", \"top_rated\");\n    setCategory(\"TopRated\");\n  };\n  const clickHandlerUpcoming = () => {\n    props.onNavClick(\"\", \"movie\", \"upcoming\");\n    setCategory(\"Upcoming\");\n  };\n\n  return (\n    <div className=\"mb-5\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand\" href=\"#\">\n            MovieStore\n          </span>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <button\n                  type=\"button\"\n                  className={\n                    category === \"Popular\"\n                      ? \"btn btn-link active\"\n                      : \"btn btn-link\"\n                  }\n                  aria-current=\"page\"\n                  href=\"#\"\n                  onClick={clickHandlerPopular}\n                >\n                  Popular\n                </button>\n              </li>\n              <li className=\"nav-item\">\n                <button\n                  type=\"button\"\n                  className={\n                    category === \"TopRated\"\n                      ? \"btn btn-link active\"\n                      : \"btn btn-link\"\n                  }\n                  href=\"#\"\n                  onClick={clickHandlerTopRated}\n                >\n                  Top Rated\n                </button>\n              </li>\n              <li className=\"nav-item\">\n                <button\n                  type=\"button\"\n                  className={\n                    category === \"Upcoming\"\n                      ? \"btn btn-link active\"\n                      : \"btn btn-link\"\n                  }\n                  href=\"#\"\n                  onClick={clickHandlerUpcoming}\n                >\n                  Upcoming\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","require(\"./Error.css\");\n\nconst Error = (props) => {\n  return (\n    <div>\n      {props.msg === true ? (\n        <h4>Opps! Nothing found!</h4>\n      ) : (\n        <h4>Search for a Movie, Tv Show or Person...</h4>\n      )}\n    </div>\n  );\n};\n\nexport default Error;\n","import { useState } from \"react\";\nconst axios = require(\"axios\").default;\nconst SearchForm = require(\"./components/SearchForm\").default;\nconst Movies = require(\"./components/Movies\").default;\nconst TvShows = require(\"./components/TvShows\").default;\nconst Person = require(\"./components/Person\").default;\nconst Navbar = require(\"./components/Navbar\").default;\nconst Error = require(\"./components/Error\").default;\n\nfunction App() {\n  const [searchResult, setSearchResult] = useState({\n    resultArray: [],\n    genre_ids_movie: [],\n    genre_ids_tv: [],\n    searchField: \"movie\",\n    searchTerm: \"\",\n    category: \"\",\n    error: false,\n  });\n\n  const SubmitFormHandler = async (searchTerm, field, category) => {\n    let result;\n    if (searchTerm) {\n      result = await axios.get(\n        `https://api.themoviedb.org/3/search/${field}?api_key=8d636748f84e680ee2856119069c5570&language=en-US&query=${searchTerm}&page=1&include_adult=false`\n      );\n    } else if (category) {\n      result = await axios.get(\n        `https://api.themoviedb.org/3/${field}/${category}?api_key=8d636748f84e680ee2856119069c5570&language=en-US`\n      );\n    }\n\n    const genre_ids_movie = await axios.get(\n      \"https://api.themoviedb.org/3/genre/movie/list?api_key=8d636748f84e680ee2856119069c5570&language=en-US\"\n    );\n    const genre_ids_Tv = await axios.get(\n      \"https://api.themoviedb.org/3/genre/tv/list?api_key=8d636748f84e680ee2856119069c5570&language=en-US\"\n    );\n\n    let genresMovie = {};\n    for (const i of genre_ids_movie.data.genres) {\n      let id = i.id;\n      let g = i.name;\n      genresMovie[`${id}`] = g;\n    }\n    let genresTv = {};\n    for (const i of genre_ids_Tv.data.genres) {\n      let id = i.id;\n      let g = i.name;\n      genresTv[`${id}`] = g;\n    }\n    if(!category || category===\"top_rated\")category=\"top Rated\";\n    setSearchResult({\n      resultArray: [...result.data.results],\n      genre_ids_movie: genresMovie,\n      genre_ids_tv: genresTv,\n      searchField: field,\n      searchTerm: searchTerm,\n      category: category.charAt(0).toUpperCase()+category.slice(1)+\" Movies\",\n      error: true,\n    });\n  };\n\n  console.log(searchResult.resultArray);\n\n  return (\n    <div>\n      <Navbar onNavClick={SubmitFormHandler} />\n      <SearchForm onSubmitForm={SubmitFormHandler} />\n      {searchResult.resultArray.length === 0 && (\n        <Error msg={searchResult.error} />\n      )}\n      {searchResult.resultArray.length > 0 && (\n        <div className=\"container mt-5\">\n          {searchResult.searchField === \"movie\" && (\n            <Movies\n              key={searchResult.searchField}\n              searchResults={searchResult.resultArray}\n              genresMovie={searchResult.genre_ids_movie}\n              searchTerm={searchResult.searchTerm || searchResult.category}\n            />\n          )}\n          {searchResult.searchField === \"tv\" && (\n            <TvShows\n              key={searchResult.searchField}\n              searchResults={searchResult.resultArray}\n              genresTv={searchResult.genre_ids_tv}\n              searchTerm={searchResult.searchTerm}\n            />\n          )}\n          {searchResult.searchField === \"person\" && (\n            <Person\n              key={searchResult.searchField}\n              searchResults={searchResult.resultArray}\n              searchTerm={searchResult.searchTerm}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nrequire(\"./index.css\")\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","require(\"./Card.scss\");\n\nconst Card = (props) => {\n  const imageSource = `https://image.tmdb.org/t/p/w500${props.image}`;\n  return (\n    <div className=\"card mb-5\">\n      <img className=\"card-img-top\" src={imageSource} />\n      <div className=\"info\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.title}</h5>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\">\n            {props.movies ? (\n              <p className=\"font-weight-bold text-center\">\n                <b>Known For: </b>\n              </p>\n            ) : (\n              <span>\n                <b>Date: </b>\n              </span>\n            )}\n            {props.movies\n              ? props.movies.map((m) => (\n                  <p className=\"text-center\">\n                    {m.title}\n                    <hr />\n                  </p>\n                ))\n              : props.date}\n          </li>\n          {!props.movies && (\n            <div>\n              <li className=\"list-group-item \">\n                <b>Rating:</b> {props.rating}/10\n              </li>\n              {props.genres.map((g) => (\n                <p className=\"text-center\">\n                  {g}\n                  \n                </p>\n              ))}\n            </div>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n"],"sourceRoot":""}